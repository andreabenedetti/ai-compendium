const data = [
    {
        title: "IPLAN: Interactive and Procedural Layout Planning",
        value: {
            problems: ["Manual labor"],
            data: ["Images"],
            promises: ["Creativity", "Freedom", "Automation"],
            humans: ["Designers"]
        },
        loop: [
            {
                "actor": "algorithm",
                "index": 4,
                "title": "Reverse-engineering",
                "label": "iPLAN reverse-engineers the final design to obtain the stage-to-stage process, based on principles that are widely adopted by professional designers . This process is performed by the algorithm."
            }, {
                "actor": "algorithm",
                "index": 3,
                "title": "Markov chain model",
                "label": "iPLAN uses a Markov chain model to capture the full design procedure. The algorithm designs and uses the Markov chain model to capture the full design procedure."
            }, {
                "actor": "human",
                "type": "Designer",
                "index": 1,
                "title": "Human input",
                "label": "iPLAN accepts user guidance at every stage of the design process. This means that the user can provide input at different stages across a wide range of levels of detail."
            }, {
                "actor": "algorithm",
                "index": 2,
                "title": "Automatic suggestion",
                "label": "iPLAN automatically suggests possible designs based on the user's input. The algorithm is designed to offer the capability of fully automated generation ."
            }, {
                "actor": "algorithm",
                "index": 1,
                "title": "Learning",
                "label": "Learning from human inputs on designs augmented by reverse-engineered processes."
            }
        ]
    }, {
        "title": "Understanding Aesthetic Evaluation using Deep Learning",
        value: {
            problems: ["Manual labor", "Lack of data"],
            data: ["User data"],
            promises: ["Automation", "Human support"],
            humans: ["End-user"]
        },
        loop: [
            {
            "index": 6,
              "actor": "algorithm",
              "type": "CNN classifier",
              "title": "Training on database of examples",
              "label": "Learn visual features important for aesthetic evaluation"
            },
            {
              "actor": "algorithm",
              "index": 5,
              "type": "CNN classifier",
              "title": "Re-training on artist-specific datasets",
              "label": "Increase accuracy in automating personal aesthetic judgement"
            },
            {
              "actor": "algorithm",
              "index": 4,
              "type": "generative system",
              "title": "Producing phenotype images",
              "label": "Generate a set of phenotype images"
            },
            {
              "actor": "algorithm",
              "index": 3,
              "type": "CNN classifier",
              "title": "Finding visual similarity",
              "label": "Use CNN classifier to find visual similarity between generated phenotype images and database of examples"
            },
            {
              "actor": "algorithm",
              "index": 2,
              "type": "CNN classifier",
              "title": "Assigning scores",
              "label": "Assign a score to each generated phenotype image based on its similarity to the examples in the database"
            },
            {
              "actor": "algorithm",
              "index": 1,
              "type": "CNN classifier",
              "title": "Ranking phenotype images",
              "label": "Rank the generated phenotype images in order of aesthetic quality based on the assigned scores"
            }
          ]
    }, {
        title: "Towards Model-informed Precision Dosing with Expert-in-the-loop Machine Learning",
        value: {
            problems: ["High costs", "Lack of data", "Opacity"],
            data: ["Annotations"],
            promises: ["Automation", "Low costs"],
            humans: ["Domain experts"]
        },
        loop: [
            {
              "actor": "human",
              "index": 1,
              "type": "expert",
              "title": "Edit learned rules",
              "label": "Experts can directly edit the learned rules generated by the model to improve its interpretability and accuracy."
            },
            {
              "actor": "human",
              "index": 2,
              "type": "expert",
              "title": "Annotate predicted values",
              "label": "Experts can annotate observations/predicted values to help identify errors or areas where the model needs improvement."
            },
            {
              "actor": "algorithm",
              "index": 1,
              "type": "machine learning model",
              "title": "Update the model",
              "label": "The model is updated based on the feedback provided by the experts, and the learning process continues iteratively."
            }
          ]
    }, 
    {
        title: "THEaiTRE: Artificial Intelligence to Write a Theatre Play",
        value: {
            problems: ["Not mentioned"],
            data: ["Not mentioned"],
            promises: ["Automation", "Content creation"],
            humans: ["End-users"]
        },
        loop: [
            {
              "actor": "human",
              "index": 1,
              "type": "Play expert",
              "title": "Generate Synopsis",
              "label": "Generate a synopsis of the play using various options, such as play background/setting from play databases, more detailed synopses from fan websites, or scenic remarks extracted from texts of plays themselves."
            },
            {
              "actor": "human",
              "index": 2,
              "type": "Play expert",
              "title": "Generate Character List",
              "label": "Generate a list of characters based on the synopsis."
            },
            {
              "actor": "algorithm",
              "index": 4,
              "type": "Language Model",
              "title": "Seed Language Model",
              "label": "Seed a language model (LM) with a prompt that is the beginning of a dramatic situation."
            },
            {
              "actor": "algorithm",
              "index": 3,
              "type": "Language Model",
              "title": "Fine-tune Language Model",
              "label": "Fine-tune the LM to theatre plays to see how far this approach can go."
            },
            {
              "actor": "algorithm",
              "index": 2,
              "type": "Language model",
              "title": "Restrict Generation",
              "label": "Restrict the generation by enforcing that only certain predetermined characters speak, possibly in a pregenerated order. This can be achieved by stopping the generation."
            },
            {
              "actor": "algorithm",
              "index": 1,
              "type": "Language model",
              "title": "Generate Final Text",
              "label": "Generate the final text using a similar approach as the base LM generation."
            }
          ]
    }, {
        title: "Race Driver Evaluation at a Driving Simulator using a physical Model and a Machine Learning Approach",
        value: {
            problems: ["Human interpretation", "Inaccuracies"],
            data: ["User data"],
            promises: ["Automation"],
            humans: ["Drivers"]
        },
        loop: [
            {
                "actor": "human",
                "index": 1,
                "type": "Driver",
                "title": "Provide data",
                "label": "Provide data to the algorithm through a driving simulation."
              },
            {
              "actor": "algorithm",
              "index": 4,
              "type": "optCog optimizer",
              "title": "Optimize vehicle acceleration in Cog",
              "label": "Optimizing the vehicle's acceleration in the center of gravity (Cog) using the optCog optimizer."
            },
            {
              "actor": "algorithm",
              "index": 3,
              "type": "optTire optimizer",
              "title": "Evaluate maximum possible force of each tire",
              "label": "Evaluating the maximum possible force of each tire independently using the optTire optimizer."
            },
            {
              "actor": "algorithm",
              "index": 2,
              "type": "N/A",
              "title": "Define performance scores",
              "label": "Defining scores for overall, vehicle-trajectory, and handling performance based on the outcome of the optimizers."
            },
            {
              "actor": "algorithm",
              "index": 1,
              "type": "machine learning model architecture",
              "title": "Propose machine learning model architecture",
              "label": "Proposing a machine learning model architecture to directly determine the scores from the initial data."
            }
          ]
    }, {
      title: "Zero Shot Learning for Code Education: Rubric Sampling with Deep Learning Inference",
      value: {
        humans: ["Teachers"],
        problems: [null],
        technologies: ["Deep learning"],
        promises: ["Human support", "Speed", "Human collaboration"],
        data: ["Code"],
      },
      loop: [
        {
          "actor": "human", 
          "type": "Experts", 
          "index": 1,
          "title": "Elicit samples", 
          "label": "In this step, we ask experts to describe a studentâ€™s thought process, enumerating strategies to get to a right or wrong answer. Given a detailed enough description, we can use it to label indefinitely. These labels will be noisy but the quantity should make up for any uncertainty."
        },
        {
          "actor": "algorithm", 
          "type": "Deep learning", 
          "index": 2,
          "title": "Inference", 
          "label": "Once we have elicited samples from the expert prior, we can use deep learning techniques to infer the correct label for a given input x. This involves training a deep model on the labeled data and using it to predict labels for new inputs."
        },
        {
          "actor": "algorithm", 
          "type": "Rubric sampling", 
          "index": 1,
          "title": "Provide feedback", 
          "label": "Once we have inferred the correct label for a given input x, we can provide feedback to the student based on their performance. This feedback can be associated with specific parts of a student's solution and can articulate their misconceptions in the language of the instructor."
        },
      ]
    }, {
      title: "Understanding Questions that Arise When Working with Business Documents",
      value: {
        problems: ["Lack of data"],
        data: ["Written text", "User data"],
        promises: ["Human collaboration"],
        humans: ["Authors", "Businessmen"]
      },
      loop: [
        {
          "actor": "human",
          "index": 1,
          "type": "Participant",
          "title": "Submit question and share link",
          "label": "Participants submit questions and share links to documents through a Microsoft Word add-in."
        },
        {
          "actor": "algorithm",
          "index": 2,
          "type": "AI model",
          "title": "Extract passages from documents",
          "label": "The system uses an AI model to extract passages from documents that may contain answers to the questions."
        },
        {
          "actor": "human",
          "index": 2,
          "type": "knowledge worker",
          "title": "Determine answerability and assign tags",
          "label": "Workers determine whether an answer to the question can be provided at all, and place the question in different queues based on this criterion. Workers assign finer-grained tags to questions and iterate over tags already assigned to prior questions as new ones come in."
        },
        {
          "actor": "algorithm",
          "index": 1,
          "type": "ML Q&A model",
          "title": "Route questions to appropriate respondents",
          "label": "The system routes questions to the appropriate respondents, either the AI model or human knowledge workers."
        },
        {
          "actor": "human",
          "index": 3,
          "type": "knowledge worker",
          "title": "Access document and provide answer",
          "label": "For questions about document content, workers manually access the document using the share link and their personal credentials. Workers copy and paste the question and document content into a custom UI front-end for the ML Q&A model. If the AI-provided answer is unsatisfactory upon, workers provide a human response."
        },
        {
          "actor": "human",
          "index": 4,
          "type": "Participant",
          "title": "Receive answer",
          "label": "The system returns the answer to the participant through the Microsoft Word add-in."
        }
      ]
    }, {
      title: "What can AI do for me: Evaluating Machine Learning Interpretations in Cooperative Play",
      value: {
        problems: ["Rigor"],
        data: ["Written text"],
        promises: ["Accuracy"],
        humans: ["Domain experts", "Non-expert user"]
      },
      loop: [
        {
          "actor": "human",
          "index": 1,
          "type": "player",
          "title": "Form team",
          "label": "The human player forms a team with a computer teammate."
        },
        {
          "actor": "human",
          "index": 2,
          "type": "player",
          "title": "In charge",
          "label": "The human player is in charge of the team."
        },
        {
          "actor": "algorithm",
          "index": 2,
          "type": "computer",
          "title": "Update guesses",
          "label": "The computer periodically updates its guesses and interpretations (every 4 words in the experiments described in the PDF)."
        },
        {
          "actor": "human",
          "index": 3,
          "type": "player",
          "title": "Buzz and answer",
          "label": "At any point before the question is fully read, the human can decide to buzz, interrupt the readout, and provide an answer."
        },
        {
          "actor": "algorithm",
          "index": 1,
          "type": "computer",
          "title": "Provide interpretations",
          "label": "The interpretations provided by the computer should help the human better decide whether to trust the computer's prediction or not."
        }
      ]
    }
];

export default data;