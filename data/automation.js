const data = [
  {
    title: "IPLAN: Interactive and Procedural Layout Planning",
    value: {
      problems: ["Manual labor"],
      data: ["Images"],
      promises: ["Creativity", "Freedom", "Automation"],
      humans: ["Designers"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 4,
        "title": "Reverse-engineering",
        "label": "iPLAN reverse-engineers the final design to obtain the stage-to-stage process, based on principles that are widely adopted by professional designers . This process is performed by the algorithm."
      }, {
        "actor": "algorithm",
        "index": 3,
        "title": "Markov chain model",
        "label": "iPLAN uses a Markov chain model to capture the full design procedure. The algorithm designs and uses the Markov chain model to capture the full design procedure."
      }, {
        "actor": "human",
        "type": "Designer",
        "index": 1,
        "title": "Human input",
        "label": "iPLAN accepts user guidance at every stage of the design process. This means that the user can provide input at different stages across a wide range of levels of detail."
      }, {
        "actor": "algorithm",
        "index": 2,
        "title": "Automatic suggestion",
        "label": "iPLAN automatically suggests possible designs based on the user's input. The algorithm is designed to offer the capability of fully automated generation ."
      }, {
        "actor": "algorithm",
        "index": 1,
        "title": "Learning",
        "label": "Learning from human inputs on designs augmented by reverse-engineered processes."
      }
    ]
  }, {
    "title": "Understanding Aesthetic Evaluation using Deep Learning",
    value: {
      problems: ["Manual labor", "Lack of data"],
      data: ["User data"],
      promises: ["Automation", "Human support"],
      humans: ["End-user"]
    },
    loop: [
      {
        "index": 6,
        "actor": "algorithm",
        "type": "CNN classifier",
        "title": "Training on database of examples",
        "label": "Learn visual features important for aesthetic evaluation"
      },
      {
        "actor": "algorithm",
        "index": 5,
        "type": "CNN classifier",
        "title": "Re-training on artist-specific datasets",
        "label": "Increase accuracy in automating personal aesthetic judgement"
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "generative system",
        "title": "Producing phenotype images",
        "label": "Generate a set of phenotype images"
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "CNN classifier",
        "title": "Finding visual similarity",
        "label": "Use CNN classifier to find visual similarity between generated phenotype images and database of examples"
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "CNN classifier",
        "title": "Assigning scores",
        "label": "Assign a score to each generated phenotype image based on its similarity to the examples in the database"
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "CNN classifier",
        "title": "Ranking phenotype images",
        "label": "Rank the generated phenotype images in order of aesthetic quality based on the assigned scores"
      }
    ]
  }, {
    title: "Towards Model-informed Precision Dosing with Expert-in-the-loop Machine Learning",
    value: {
      problems: ["High costs", "Lack of data", "Opacity"],
      data: ["Annotations"],
      promises: ["Automation", "Low costs"],
      humans: ["Domain experts"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "expert",
        "title": "Edit learned rules",
        "label": "Experts can directly edit the learned rules generated by the model to improve its interpretability and accuracy."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "expert",
        "title": "Annotate predicted values",
        "label": "Experts can annotate observations/predicted values to help identify errors or areas where the model needs improvement."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "machine learning model",
        "title": "Update the model",
        "label": "The model is updated based on the feedback provided by the experts, and the learning process continues iteratively."
      }
    ]
  }, 
  {
    title: "THEaiTRE: Artificial Intelligence to Write a Theatre Play",
    value: {
      problems: ["Not mentioned"],
      data: ["Not mentioned"],
      promises: ["Automation", "Content creation"],
      humans: ["End-users"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Play expert",
        "title": "Generate Synopsis",
        "label": "Generate a synopsis of the play using various options, such as play background/setting from play databases, more detailed synopses from fan websites, or scenic remarks extracted from texts of plays themselves."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Play expert",
        "title": "Generate Character List",
        "label": "Generate a list of characters based on the synopsis."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "Language Model",
        "title": "Seed Language Model",
        "label": "Seed a language model (LM) with a prompt that is the beginning of a dramatic situation."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "Language Model",
        "title": "Fine-tune Language Model",
        "label": "Fine-tune the LM to theatre plays to see how far this approach can go."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Language model",
        "title": "Restrict Generation",
        "label": "Restrict the generation by enforcing that only certain predetermined characters speak, possibly in a pregenerated order. This can be achieved by stopping the generation."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Language model",
        "title": "Generate Final Text",
        "label": "Generate the final text using a similar approach as the base LM generation."
      }
    ]
  }, {
    title: "Race Driver Evaluation at a Driving Simulator using a physical Model and a Machine Learning Approach",
    value: {
      problems: ["Human interpretation", "Inaccuracies"],
      data: ["User data"],
      promises: ["Automation"],
      humans: ["Drivers"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Driver",
        "title": "Provide data",
        "label": "Provide data to the algorithm through a driving simulation."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "optCog optimizer",
        "title": "Optimize vehicle acceleration in Cog",
        "label": "Optimizing the vehicle's acceleration in the center of gravity (Cog) using the optCog optimizer."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "optTire optimizer",
        "title": "Evaluate maximum possible force of each tire",
        "label": "Evaluating the maximum possible force of each tire independently using the optTire optimizer."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "N/A",
        "title": "Define performance scores",
        "label": "Defining scores for overall, vehicle-trajectory, and handling performance based on the outcome of the optimizers."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "machine learning model architecture",
        "title": "Propose machine learning model architecture",
        "label": "Proposing a machine learning model architecture to directly determine the scores from the initial data."
      }
    ]
  }, {
    title: "Zero Shot Learning for Code Education: Rubric Sampling with Deep Learning Inference",
    value: {
      humans: ["Teachers"],
      problems: [null],
      technologies: ["Deep learning"],
      promises: ["Human support", "Speed", "Human collaboration"],
      data: ["Code"],
    },
    loop: [
      {
        "actor": "human", 
        "type": "Experts", 
        "index": 1,
        "title": "Elicit samples", 
        "label": "In this step, we ask experts to describe a studentâ€™s thought process, enumerating strategies to get to a right or wrong answer. Given a detailed enough description, we can use it to label indefinitely. These labels will be noisy but the quantity should make up for any uncertainty."
      },
      {
        "actor": "algorithm", 
        "type": "Deep learning", 
        "index": 2,
        "title": "Inference", 
        "label": "Once we have elicited samples from the expert prior, we can use deep learning techniques to infer the correct label for a given input x. This involves training a deep model on the labeled data and using it to predict labels for new inputs."
      },
      {
        "actor": "algorithm", 
        "type": "Rubric sampling", 
        "index": 1,
        "title": "Provide feedback", 
        "label": "Once we have inferred the correct label for a given input x, we can provide feedback to the student based on their performance. This feedback can be associated with specific parts of a student's solution and can articulate their misconceptions in the language of the instructor."
      },
    ]
  }, {
    title: "Understanding Questions that Arise When Working with Business Documents",
    value: {
      problems: ["Lack of data"],
      data: ["Written text", "User data"],
      promises: ["Human collaboration"],
      humans: ["Authors", "Businessmen"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Participant",
        "title": "Submit question and share link",
        "label": "Participants submit questions and share links to documents through a Microsoft Word add-in."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "AI model",
        "title": "Extract passages from documents",
        "label": "The system uses an AI model to extract passages from documents that may contain answers to the questions."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "knowledge worker",
        "title": "Determine answerability and assign tags",
        "label": "Workers determine whether an answer to the question can be provided at all, and place the question in different queues based on this criterion. Workers assign finer-grained tags to questions and iterate over tags already assigned to prior questions as new ones come in."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "ML Q&A model",
        "title": "Route questions to appropriate respondents",
        "label": "The system routes questions to the appropriate respondents, either the AI model or human knowledge workers."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "knowledge worker",
        "title": "Access document and provide answer",
        "label": "For questions about document content, workers manually access the document using the share link and their personal credentials. Workers copy and paste the question and document content into a custom UI front-end for the ML Q&A model. If the AI-provided answer is unsatisfactory upon, workers provide a human response."
      },
      {
        "actor": "human",
        "index": 4,
        "type": "Participant",
        "title": "Receive answer",
        "label": "The system returns the answer to the participant through the Microsoft Word add-in."
      }
    ]
  }, {
    title: "What can AI do for me: Evaluating Machine Learning Interpretations in Cooperative Play",
    value: {
      problems: ["Rigor"],
      data: ["Written text"],
      promises: ["Accuracy"],
      humans: ["Domain experts", "Non-expert user"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "player",
        "title": "Form team",
        "label": "The human player forms a team with a computer teammate."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "player",
        "title": "In charge",
        "label": "The human player is in charge of the team."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "computer",
        "title": "Update guesses",
        "label": "The computer periodically updates its guesses and interpretations (every 4 words in the experiments described in the PDF)."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "player",
        "title": "Buzz and answer",
        "label": "At any point before the question is fully read, the human can decide to buzz, interrupt the readout, and provide an answer."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "computer",
        "title": "Provide interpretations",
        "label": "The interpretations provided by the computer should help the human better decide whether to trust the computer's prediction or not."
      }
    ]
  }, {
    title: "Acquire, Augment, Segment & Enjoy: Weakly Supervised Instance Segmentation of Supermarket Products",
    value: {
      problems: ["Manual labor", "Inefficiencies"],
      data: ["Images"],
      promises: ["Automation"],
      humans: ["Implicit annotators"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Proposed system",
        "title": "Segment object from background",
        "label": "Automatically segment the corresponding object from the background using basic image processing techniques."
      },
      {
        "actor": "human",
        "type": "Annotator",
        "index": 1,
        "title": "Input object class",
        "label": "Manually input the class of the object on the turntable."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Proposed system",
        "title": "Create annotations",
        "label": "Create annotations for instance-aware semantic segmentation of reasonable quality with minimal effort."
      }
    ]
  }, {
    title: "AgentBuddy: A Contextual Bandit based Decision Support System for Customer Support Agents",
    value: {
      problems: ["Productivity"],
      data: ["Feedback data"],
      promises: ["Automation"],
      humans: ["Customer support"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "Bandit algorithm",
        "title": "Choose model",
        "label": "Choose one of the models among 'Search', 'Hand curated answers' etc."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Chosen model",
        "title": "Provide answer",
        "label": "Provide the answer which is observed by the CSA (care Agent)."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "CSA",
        "title": "Provide feedback",
        "label": "Receive feedback on a scale of 1-5 from the CSA."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Bandit algorithm",
        "title": "Update weights",
        "label": "Update its weights based on this feedback."
      }
    ]
  }, {
    "title": "Iterative Human and Automated Identification of Wildlife Images",
    value: {
      humans: ["Annotators"],
      problems: ["Data analysis"],
      promises: ["Human support"],
      data: ["Environmental data", "Annotations"],
    },
    "loop": [
      {
        "actor":"algorithm",
        "type":"deep learning model",
        "order": 3,
        "title":"Image prediction",
        "label":"Predict categories of images using deep learning models trained from previous periods"
      },
      {
        "actor":"algorithm",
        "type":"deep learning model",
        "index": 2,
        "title":"Confidence level calculation",
        "label":"Calculate confidence levels for predicted image categories"
      },
      {
        "actor":"human",
        "type":"annotator",
        "index": 1,
        "title":"Verify low-confidence",
        "label":"Verify low-confidence predictions through human annotation"
      },
      {
        "actor":"human",
        "type":"annotator",
        "index": 2,
        "title":"Provide annotations",
        "label":"Provide annotations for low-confidence predictions"
      },
      {
        "actor":"algorithm",
        "type":"deep learning model",
        "index": 1,
        "title":"Model updates",
        "label":"Include pseudo-labels in final data set for further model updates or ecological analyses"
      }
    ]
  }, {
    title: "A Deep Learning and Gamification Approach to Energy Conservation at Nanyang Technological University",
    value: {
      problems: ["Social behavior"],
      data: ["Logs"],
      promises: ["Optimization"],
      humans: ["Generic user"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 5,
        "type": "IoT sensors and cyber-physical systems sensing/actuation platforms",
        "title": "Collect data",
        "label": "The algorithms collect data from IoT sensors and cyber-physical systems sensing/actuation platforms."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "deep learning models",
        "title": "Analyze data",
        "label": "The algorithms analyze the data to predict the energy consumption of each resource based on the behavior of occupants."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "deep learning models",
        "title": "Optimize energy consumption",
        "label": "The algorithms optimize the energy consumption of the building as a whole."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "deep learning models",
        "title": "Provide feedback",
        "label": "The algorithms provide feedback to occupants about their energy usage."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "deep learning models",
        "title": "Suggest ways to improve behavior",
        "label": "The algorithms suggest ways to improve the energy-saving behavior of occupants."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "occupants",
        "title": "Modify behavior",
        "label": "The occupants modify their behavior based on the feedback and suggestions provided by the algorithms."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "occupants",
        "title": "Earn points",
        "label": "The occupants earn points based on their energy-saving behavior."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "occupants",
        "title": "Compete with others",
        "label": "The points earned by occupants can be used to compete with other occupants in the building."
      }
    ]
  }, {
    title: "An Image Processing Pipeline for Camera Trap Time-Lapse Recordings",
    value: {
      problems: ["Data analysis"],
      data: ["Environmental data", "Annotations"],
      promises: ["Human support"],
      humans: ["Not mentioned"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "machine learning",
        "title": "Generate draft segmentation",
        "label": "The machine learning algorithm generates a draft segmentation of the video."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "machine learning",
        "title": "Identify images with tortoises",
        "label": "The algorithm identifies at least one image containing tortoises per ground truth segment."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "machine learning",
        "title": "Draw attention to region",
        "label": "The algorithm draws the human's attention to that region of the recording."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "annotator",
        "title": "Create accurate segmentation",
        "label": "The human quickly creates a highly accurate segmentation with the assistance of the algorithm."
      }
    ]
  }, {
    title: "An Interactive Explanatory AI System for Industrial Quality Control",
    value: {
      problems: ["Inaccuracies", "Quality control"],
      data: ["Logs"],
      promises: ["Human support"],
      humans: ["Domain experts"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "ILP system",
        "title": "Generate verbal explanations",
        "label": "Based on difficult-to-formalize experiential prior knowledge from human domain experts"
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "CNN",
        "title": "Generate visual explanations",
        "label": "The system provides transparent explanations for the results to the human domain experts."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "domain expert",
        "title": "Make decisions",
        "label": "The human domain experts use the explanations to make decisions."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "support system",
        "title": "Integrate feedback",
        "label": "From the human domain experts to improve its performance"
      }
    ]
  }, {
    title: "Augmenting Scientific Creativity with an Analogical Search Engine",
    value: {
      problems: ["Information retrieval"],
      data: ["Written text", "Scientific data"],
      promises: ["Human support"],
      humans: ["Annotators"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 4,
        "type": "machine learning model",
        "title": "Algorithmic Processing",
        "label": "The fully automated system employs advanced machine learning algorithms to process a large corpus of scientific papers."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "machine learning model",
        "title": "Purpose Matching",
        "label": "Algorithms are utilized to emulate human judgment of purpose match, ensuring that the system finds partial purpose matches in the top results."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "machine learning model",
        "title": "User Interface",
        "label": "The system presents the top results to the users through an intuitive and user-friendly search interface."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "User",
        "title": "Natural Interaction",
        "label": "Users interact with the system to explore and adapt distant inspirations found in the scientific papers, leveraging the analogical similarities identified by the algorithms."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "machine learning model",
        "title": "Feedback Loop",
        "label": "As users interact with the system and explore the retrieved scientific papers, their interactions and feedback can be used to further refine the algorithms and improve the relevance and accuracy of the results over time."
      }
    ]
  }, {
    title: "Cogment: Open Source Framework For Distributed Multi-actor Training, Deployment & Operations",
    value: {
      problems: ["Complexity"],
      data: ["Not mentioned"],
      promises: ["Open source", "Human support"],
      humans: ["AI experts", "Generic humans"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "general",
        "title": "Acting in the environment",
        "label": "Humans act in the environment on par with agents to ensure safe exploratory actions in sensitive contexts like autonomous driving."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "general",
        "title": "Providing rewards",
        "label": "Humans provide rewards for several learning algorithms, for example in the context of evaluating machine-generated dialogues, summaries, semantic parsers, natural language, machine translation, and many others."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "learning",
        "title": "Learning from human demonstrations",
        "label": "Agents learn from human demonstrations under the imitation learning (IL) paradigm when it is challenging to design a reward function or when the reward function could be sparse, thus making it hard for an RL agent to learn."
      },
      {
        "actor": "human",
        "index": 4,
        "type": "general",
        "title": "Generating tasks",
        "label": "Humans generate tasks for agents to achieve."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "learning",
        "title": "Learning from human-generated tasks",
        "label": "Agents learn from the tasks generated by humans."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "learning",
        "title": "Generating curriculum",
        "label": "If no human input is possible, a different AI agent can be used to generate the curriculum."
      }
    ]
  }, {
    title: "High-quality Conversational Systems",
    value: {
      problems: ["Quality control"],
      data: ["Logs"],
      promises: ["Automation"],
      humans: ["Implicit annotators", "End-user", "AI experts"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Chatbot Trainer/Designer",
        "title": "Training Data Creation",
        "label": "Humans create training data by labeling utterances with intent categories used to train the NLU system"
      },
      {
        "actor": "human",
        "index": 2,
        "type": "User",
        "title": "Converse with Chatbot",
        "label": "The user initiates a conversation with the Chatbot"
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "NLU System",
        "title": "Intent Classification",
        "label": "The NLU system classifies user queries into intent categories using natural language understanding techniques"
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Dialogue System",
        "title": "Conversation Navigation",
        "label": "The dialogue system navigates the conversation to its successful completion using rule-based graph and learning elements"
      },
      {
        "actor": "human",
        "index": 3,
        "type": "Chatbot Trainer/Designer",
        "title": "Drift Detection",
        "label": "Humans detect drift in the chatbot system by reviewing chat logs and identifying new topics or changes in user behavior, which is used to update the system"
      },
      {
        "actor": "human",
        "index": 4,
        "type": "Chatbot Trainer/Designer",
        "title": "Intent Design Issue Identification",
        "label": "Humans identify intent design issues and suggest improvements, ensuring the system's effectiveness"
      },
      {
        "actor": "human",
        "index": 6,
        "type": "Chatbot Trainer/Designer",
        "title": "Actionable Insights Review",
        "label": "Humans review and confirm the actionable insights provided by the chatbot system, ensuring the suggested changes are appropriate before implementation"
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Chatbot System",
        "title": "Issue Identification and Response Delivery",
        "label": "The chatbot system identifies challenges in providing a good response and may hand off the conversation to a human agent or raise a ticket for human intervention, aiming to provide consistent and suitable responses while delivering a high-quality customer experience"
      }
    ]
  }, {
    title: "Shared Autonomy via Deep Reinforcement Learning",
    value: {
      problems: ["Privacy"],
      data: ["Feedback", "Tasks"],
      promises: ["Speed", "Human support", "Human interpretation"],
      humans: ["End-user"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 6,
        "type": "deep reinforcement learning algorithm",
        "title": "Learning",
        "label": "The algorithm uses deep reinforcement learning with neural network function approximation to learn an end-to-end mapping from observation and input to agent action values, with task reward as the only form of supervision."
      },
      {
        "actor": "algorithm",
        "index": 5,
        "type": "deep reinforcement learning algorithm",
        "title": "Providing Feedback",
        "label": "The algorithm provides real-time action feedback to the user based on the learned mapping."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "user",
        "title": "Providing Feedback",
        "label": "The user provides feedback to the algorithm by providing a terminal reward upon succeeding or failing at the task."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "deep reinforcement learning algorithm",
        "title": "Reward Function Decomposition",
        "label": "The algorithm decomposes the agent's reward function into known terms computed for every state and a terminal reward provided by the user, enabling the system to learn efficiently from a dense reward signal that captures generally useful behaviors and adapt to individual users through feedback."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "deep reinforcement learning algorithm",
        "title": "Incorporating Inferred Goals",
        "label": "The algorithm is capable of incorporating inferred goals into the agent's observations when the goal space and user model are known, further improving sample efficiency."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "deep reinforcement learning algorithm",
        "title": "Balancing User Commands",
        "label": "The algorithm balances the need to follow user commands closely while also deviating from the user's actions when they are suboptimal, discarding actions whose values fall below some threshold and selecting the remaining action closest to the user's input."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "deep reinforcement learning algorithm",
        "title": "Implicit Inference",
        "label": "The algorithm learns to assist the user without access to private information, implicitly inferring it from the user's input."
      }
    ]
  }, {
    title: "Society-in-the-Loop: Programming the Algorithmic Social Contract",
    value: {
      problems: ["Opaqueness"],
      data: ["Not mentioned"],
      promises: ["Acceptance", "Human collaboration"],
      humans: ["Stakeholders"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "stakeholders",
        "title": "Negotiating Values and Goals",
        "label": "Humans and stakeholders negotiate the values and goals that AI systems should strive towards, considering trade-offs between different societal interests and ethical considerations."
      },
      {
        "actor": "human",
        "type": "institutions",
        "index": 2,
        "title": "Programming the Algorithmic Social Contract",
        "label": "Institutions and tools are developed to program the algorithmic social contract between humans and governance algorithms, ensuring that AI systems align with societal values and norms."
      },
      {
        "actor": "human",
        "type": "Experts",
        "index": 3,
        "title": "Debugging and Monitoring",
        "label": "Mechanisms are established to debug and monitor the behavior of AI systems, allowing for transparency, fairness, and accountability in the governance of autonomous machines."
      },
      {
        "actor": "human",
        "type": "policymakers/ethicists",
        "index": 4,
        "title": "Involving Policymakers and Ethicists",
        "label": "Policymakers and ethicists play a crucial role in overseeing the implementation of the algorithmic social contract, ensuring that AI systems operate in accordance with societal expectations."
      },
      {
        "actor": "human",
        "index": 5,
        "type": "policymakers/public",
        "title": "Adapting to Human Values",
        "label": "New metrics and methods are developed to evaluate AI behavior against quantifiable human values, enabling policymakers and the public to articulate their expectations to machines."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "AI systems",
        "title": "Incorporate Societal Values",
        "label": "Algorithms must incorporate the values and goals negotiated by humans and stakeholders, considering trade-offs between different societal interests and ethical considerations."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "AI systems",
        "title": "Operate Transparently",
        "label": "Algorithms must operate transparently, allowing for debugging and monitoring of their behavior to ensure that they align with the algorithmic social contract."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "AI systems",
        "title": "Comply with the Algorithmic Social Contract",
        "label": "Algorithms must comply with the algorithmic social contract that is programmed and monitored by institutions and tools, ensuring that they operate in accordance with societal expectations."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "AI systems",
        "title": "Adapt to Human Values",
        "label": "Algorithms must adapt to human values, as new metrics and methods are developed to evaluate their behavior against quantifiable human values."
      }
    ]
  }, {
    title: "AstronomicAL: An interactive dashboard for visualisation, integration and classification of data using Active Learning",
    value: {
      problems: ["Inaccuracies", "Integrations"],
      data: ["Images", "Astronomical data"],
      promises: ["Human support", "Accuracy", "Optimization"],
      humans: ["End-user"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Researcher",
        "title": "Data Import and Visualization",
        "label": "Import dataset into AstronomicAL and visualize and integrate data from different sources using customizable domain-specific plots."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "AstronomicAL",
        "title": "Active Learning and Labeling",
        "label": "Utilize active learning techniques to prioritize data that offer high information gain and explore each data point chosen, injecting domain expertise directly into the training process to ensure accurate and reliable labels."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Researcher",
        "title": "Custom Model and Query Strategy",
        "label": "Adapt AstronomicAL for research to allow for domain-specific plots, novel query strategies, and improved models. Customize models and query strategies to improve performance."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "AstronomicAL",
        "title": "Test Set Creation and Validation",
        "label": "Curate a labeled test set to demonstrate the validity and generalizability of the model. Mark any example as unsure, ensuring that all training data are of high quality."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "AstronomicAL",
        "title": "Private Experimentation and Collaboration",
        "label": "Run AstronomicAL entirely locally on the userâ€™s system, providing a private space to experiment. Export a simple configuration file to share entire layouts, models, and assigned labels with the community, allowing for complete transparency and effortless reproduction of results."
      }
    ]
  }, {
    title: "Esports Agents with a Theory of Mind: Towards Better Engagement, Education, and Engineering",
    value: {
      problems: ["Data analysis"],
      data: ["Behavioral data"],
      promises: ["Optimization", "Human support"],
      humans: ["Sport players"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "Computational model",
        "title": "Processing Observed Behaviors",
        "label": "The algorithm processes observed behaviors and generates data representations of player actions within the game environment."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "Player",
        "title": "Providing Behavior Labels",
        "label": "Players interact with the system by providing labels for behaviors, indicating the time and spatial contexts of their actions within the game environment."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Computational model",
        "title": "Integrating Labeled Behaviors",
        "label": "The algorithm integrates the labeled behaviors provided by players into the computational models of esports players, incorporating qualitative and quantitative inputs."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Player",
        "title": "Interactive Correction",
        "label": "Players engage with the system to interactively correct the computational model's probabilities as well as nodes that make up the graphical model, contributing to a more accurate representation of player cognition."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Computational model",
        "title": "Utilizing Corrected Model",
        "label": "The algorithm utilizes the corrected computational model to refine the understanding of player intents, strategies, and tactics within the gaming environment."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "Player",
        "title": "Providing Insights and Feedback",
        "label": "Players provide insights and feedback that contribute to the development of AI agents acting as intelligent tutoring systems for esports, enabling personalized coaching and gameplay experiences."
      }
    ]
  }, {
    title: "IGLU 2022: Interactive Grounded Language Understanding in a Collaborative Environment at NeurIPS 2022",
    value: {
      problems: ["Human interpretation"],
      data: ["Not mentioned"],
      promises: ["Human support"],
      humans: ["End-user"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "data collection algorithm",
        "title": "Simplify Data Collection",
        "label": "Using a single-turn data collection strategy to increase the speed of data collection."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "researcher",
        "title": "Provide Instructions",
        "label": "Providing natural language instructions to the algorithm for task completion."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "training algorithm",
        "title": "Speed Up Training Environment",
        "label": "Using a new gridworld environment for fast and scalable experiments."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "researcher",
        "title": "Collaborate and Provide Feedback",
        "label": "Collaborating with the algorithm to provide feedback and guidance during the training process."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "NLP algorithm",
        "title": "Reformulate NLP Task",
        "label": "Tackling the generation of clarifying questions for truly interactive agents."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "evaluator",
        "title": "Provide Feedback on Generated Questions",
        "label": "Interacting with the algorithm to provide feedback on the effectiveness of the generated clarifying questions."
      }
    ]
  }, {
    title: "Integrative Imaging Informatics for Cancer Research: Workflow Automation for Neuro-oncology (I3CR-WANO)",
    value: {
      problems: ["Health", "Manual labor"],
      data: ["Bodily traces"],
      promises: ["Automation"],
      humans: ["Medical experts"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Clinician",
        "title": "Input Data Acquisition",
        "label": "Obtain DICOM format MRI data from patients with high- and low-grade gliomas."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "AI system",
        "title": "Data Classification and Preprocessing",
        "label": "Classify MRI sequences using an ensemble of NLP and CNN models. Preprocess the MRI data, including image registration, skull stripping, and bias field correction."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Radiologist",
        "title": "Data Classification Review",
        "label": "Review the classification results and ensure the accuracy of sequence identification."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "AI system",
        "title": "Tumor Segmentation and Feature Extraction",
        "label": "Segment tumor tissue subtypes using CNNs to generate quantitative tumor measurements. Optionally allow expert-in-the-loop manual refinement of segmentation results."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "Oncologist",
        "title": "Clinical Decision Support and Research Analysis",
        "label": "Utilize the quantitative tumor measurements for personalized treatment planning and response assessment. Leverage the system to streamline data curation, model prototyping, and standardized dataset creation for research collaborations."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "AI system",
        "title": "Outcome Assessment and Reporting",
        "label": "Provide segmentation masks for longitudinal tumor tracking and quantitative growth assessment. Generate standardized reports and visualizations based on the processed MRI data."
      }
    ]
  }, {
    title: "Interactive Evolutionary Multi-Objective Optimization via Learning-to-Rank",
    value: {
      problems: ["Complexity", "Decision making"],
      data: ["Feedback"],
      promises: ["Speed", "Human support"],
      humans: ["Decision makers"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 6,
        "type": "EMO algorithm",
        "title": "Generate candidate solutions",
        "label": "The EMO algorithm generates a set of candidate solutions."
      },
      {
        "actor": "algorithm",
        "index": 5,
        "type": "consultation module",
        "title": "Present candidate solutions",
        "label": "The consultation module presents a set of selected candidate solutions to the Decision Maker."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "Decision Maker",
        "title": "Provide feedback",
        "label": "The Decision Maker provides feedback on the candidate solutions based on her preference."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "LTR neural network",
        "title": "Learn preference",
        "label": "The LTR neural network learns the Decision Maker's preference based on the feedback."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "LTR neural network",
        "title": "Guide EMO algorithm",
        "label": "The LTR model is applied to guide the EMO algorithm towards the SOI."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "EMO algorithm",
        "title": "Generate new solutions",
        "label": "The EMO algorithm generates a new set of candidate solutions based on the guidance from the LTR model."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "consultation module",
        "title": "Present new candidate solutions",
        "label": "The consultation module presents the new set of candidate solutions to the Decision Maker."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Decision Maker",
        "title": "Provide feedback",
        "label": "The Decision Maker provides feedback on the new candidate solutions based on her preference."
      }
    ]
  }, {
    title: "Iterative annotation to ease neural network training: Specialized machine learning in medical image analysis",
    value: {
      problems: ["Adoption"],
      data: ["Images"],
      promises: ["Automation"],
      humans: ["Medical experts"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 4,
        "type": "semantic segmentation network",
        "title": "Process Whole Slide Images",
        "label": "The algorithm processes whole slide images using a semantic segmentation network."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "expert",
        "title": "Interact with Network Predictions",
        "label": "Human experts interact with the network's predictions and correct any inaccuracies in the annotations."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "semantic segmentation network",
        "title": "Retrain with Corrected Annotations",
        "label": "The corrected annotations provided by human experts are used to retrain the semantic segmentation network."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "semantic segmentation network",
        "title": "Convert Predictions for Display",
        "label": "The network's predictions are converted back to a format for display in WSI viewing software, such as Aperio ImageScope."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "expert",
        "title": "Review and Provide Feedback",
        "label": "Human experts review the updated network predictions and provide further feedback, initiating additional training iterations if necessary."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "semantic segmentation network",
        "title": "Fine-tune Based on Human Feedback",
        "label": "The network is fine-tuned based on human feedback, leading to improved accuracy and reduced burden of manual WSI annotation."
      }
    ]
  }, {
    title: "Learning from Thresholds: Fully Automated Classification of Tumor Infiltrating Lymphocytes for Multiple Cancer Types",
    value: {
      problems: ["High costs", "Time consuming"],
      data: ["Bodily traces"],
      promises: ["Automation"],
      humans: ["Not mentioned"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "annotator",
        "title": "Manual Annotations",
        "label": "Manually annotate image patches with TIL positive or TIL negative labels for a subset of cancer types."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "TIL classification network",
        "title": "Semi-Automatic Annotations",
        "label": "Apply a classification algorithm to Whole Slide Images (WSIs) and adjust the predicted TIL probability maps by applying thresholds to generate semi-automatic annotations."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "AI model",
        "title": "Training Data Generation",
        "label": "Combine manually annotated patches and semi-automatically annotated patches to form the training set for the AI model."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "AI model",
        "title": "AI Model Training",
        "label": "Train deep neural network models, such as VGG 16-layer network and Inception-V4, using the combined dataset to generalize across multiple cancer types."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "AI model",
        "title": "Automatic Application",
        "label": "Automatically apply the trained AI model to each cancer type without human adjustment, providing TIL prediction results."
      }
    ]
  }, {
    title: "Learning to Learn in Simulation",
    value: {
      problems: ["Mimickry"],
      data: ["Logs"],
      promises: ["Speed", "Automation"],
      humans: ["Not mentioned"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 5,
        "type": "Curiosity agent",
        "title": "Select Actions",
        "label": "The curiosity agent selects actions to navigate the robot within the exploration space."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "Curiosity agent",
        "title": "Request Ground Truth",
        "label": "The curiosity agent may request ground truth annotations from the human operator when additional information is needed."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "Operator",
        "title": "Provide Feedback",
        "label": "The human operator provides feedback by providing ground truth annotations based on the robot's requests."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "Robot",
        "title": "Utilize Feedback",
        "label": "The robot uses the feedback to improve its performance and adjust its exploration strategy."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Curiosity agent",
        "title": "Iterative Improvement",
        "label": "The curiosity agent continues to select actions and seek out new information, iteratively improving the robot's learning process."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Robot",
        "title": "Autonomous Learning",
        "label": "The collaboration aims to reduce the burden on the human operator and enhance the robot's autonomous learning capabilities."
      }
    ]
  }, {
    title: "Learning to Segment Anatomical Structures Accurately from One Exemplar",
    value: {
      problems: ["Lack of data", "Quality of data"],
      data: ["Images", "Annotations"],
      promises: ["Automation"],
      humans: ["Medical experts"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 3,
        "type": "CTN",
        "title": "Initialization",
        "label": "CTN takes the exemplar contour as an initialization and gradually evolves it to minimize the weighted loss for each unlabeled image."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "User",
        "title": "Correction",
        "label": "If any part in the predicted contour is inaccurate, users can correct them by drawing line segments."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "CTN",
        "title": "Incorporation",
        "label": "CTN formats these corrections as partial contours and incorporates them back into the training via an additional Chamfer loss."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "CTN",
        "title": "Improvement",
        "label": "CTN consistently improves with more human corrections, potentially achieving better performance than fully supervised methods with considerably less annotation efforts."
      }
    ]
  }, {
    title: "Lizard: A Large-Scale Dataset for Colonic Nuclear Instance Segmentation and Classification",
    value: {
      problems: ["Manual labor"],
      data: ["Bodily traces"],
      promises: ["Abundance of data", "Automation"],
      humans: ["Medical experts"]
    },
    loop: [
      {
        "actor": "human",
        "index": 1,
        "type": "Domain experts",
        "title": "Data Collection",
        "label": "Provide input for accurate delineation of object boundaries"
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "Multi-stage annotation pipeline",
        "title": "Data Collection",
        "label": "Utilize input from domain experts to collect accurate annotations at scale"
      },
      {
        "actor": "human",
        "index": 2,
        "type": "Pathologists",
        "title": "Validation of Annotations",
        "label": "Assess representative samples provided by the dataset"
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "Quantitative concordance statistics computation",
        "title": "Validation of Annotations",
        "label": "Compute quantitative concordance statistics between pathologists and the dataset to ensure the accuracy of the annotations"
      },
      {
        "actor": "human",
        "index": 3,
        "type": "Researchers",
        "title": "Performance Benchmarking",
        "label": "Test their developed models on the dataset"
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "Performance benchmarking",
        "title": "Performance Benchmarking",
        "label": "Provide performance benchmarks to encourage the development of accurate and interpretable downstream models for the computational analysis of H&E stained colon tissue"
      }
    ]
  }, {
    title: "Making Table Understanding Work in Practice",
    value: {
      problems: ["Data analysis"],
      data: ["Digital traces"],
      promises: ["Human collaboration", "Automation"],
      humans: ["Not mentioned"]
    },
    loop: [
      {
        "actor": "algorithm",
        "index": 6,
        "type": "SIGMATYPER",
        "title": "Match column names to type ontology",
        "label": "Matches each column name to the labels in the type ontology using syntactic and semantic matching."
      },
      {
        "actor": "human",
        "index": 1,
        "type": "user",
        "title": "Review matches and provide feedback",
        "label": "Reviews the matches and provides feedback on any incorrect matches."
      },
      {
        "actor": "algorithm",
        "index": 5,
        "type": "SIGMATYPER",
        "title": "Calculate cosine similarity",
        "label": "Uses an embedding of the entire table to calculate the cosine similarity between the column names and semantic types."
      },
      {
        "actor": "human",
        "index": 2,
        "type": "user",
        "title": "Review predicted types and provide feedback",
        "label": "Reviews the predicted semantic types and provides feedback on any incorrect predictions."
      },
      {
        "actor": "algorithm",
        "index": 4,
        "type": "SIGMATYPER",
        "title": "Infer labeling functions",
        "label": "Infers labeling functions from data used to generate new training data and prediction functions."
      },
      {
        "actor": "human",
        "index": 3,
        "type": "user",
        "title": "Review inferred functions and provide feedback",
        "label": "Reviews the inferred labeling functions and provides feedback on any incorrect inferences."
      },
      {
        "actor": "algorithm",
        "index": 3,
        "type": "SIGMATYPER",
        "title": "Generate new training data",
        "label": "Generates new training data using data programming and the inferred labeling functions."
      },
      {
        "actor": "human",
        "index": 4,
        "type": "user",
        "title": "Review new training data and provide feedback",
        "label": "Reviews the new training data and provides feedback on any incorrect data."
      },
      {
        "actor": "algorithm",
        "index": 2,
        "type": "SIGMATYPER",
        "title": "Train local model",
        "label": "Trains a local model on the new training data."
      },
      {
        "actor": "human",
        "index": 5,
        "type": "user",
        "title": "Review local model performance and provide feedback",
        "label": "Reviews the performance of the local model and provides feedback on any incorrect predictions."
      },
      {
        "actor": "algorithm",
        "index": 1,
        "type": "SIGMATYPER",
        "title": "Make predictions on new data",
        "label": "Uses the local model to make predictions on new data."
      },
      {
        "actor": "human",
        "index": 6,
        "type": "user",
        "title": "Review predictions and provide feedback",
        "label": "Reviews the predictions and provides feedback on any incorrect predictions."
      }
    ]
  }
];

export default data;